name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        powershell-version: ['5.1', '7.x']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell ${{ matrix.powershell-version }}
      shell: pwsh
      run: |
        Write-Host "Using PowerShell version: $($PSVersionTable.PSVersion)"
        Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)"
    
    - name: Install Dependencies
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -Force -SkipPublisherCheck
        Install-Module -Name PSScriptAnalyzer -Force
        Install-Module -Name Microsoft.Graph.Authentication -Force
    
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary
        $errors = $results | Where-Object { $_.Severity -eq 'Error' -or $_.Severity -eq 'ParseError' }
        if ($errors.Count -gt 0) {
          $errors | Out-String | Write-Host
          throw "PSScriptAnalyzer found $($errors.Count) critical errors"
        } else {
          Write-Host "âœ… PSScriptAnalyzer passed - no critical errors found"
          $warnings = ($results | Where-Object { $_.Severity -eq 'Warning' }).Count
          $info = ($results | Where-Object { $_.Severity -eq 'Information' }).Count
          Write-Host "ðŸ“Š Summary: $warnings warnings, $info informational messages (non-blocking)"
        }
    
    - name: Prepare Module Structure
      shell: pwsh
      run: |
        # Create module directory structure for testing
        Write-Host "Setting up module for testing..."
        Write-Host "Current directory: $PWD"
        Get-ChildItem . | Format-Table Name, Mode, Length
        
        # The module files are already in the correct structure
        # Just add current directory to PSModulePath for testing
        $env:PSModulePath = "$PWD;$env:PSModulePath"
        Write-Host "PSModulePath: $env:PSModulePath"
        
        # Test module import directly from current directory
        Import-Module ./CopilotAgent.psd1 -Force
        Get-Module CopilotAgent | Format-List
        
        # List available functions
        Write-Host "Available functions:"
        Get-Command -Module CopilotAgent | Format-Table Name, CommandType
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        # Ensure module is available for tests
        $env:PSModulePath = "$PWD;$env:PSModulePath"
        Import-Module ./CopilotAgent.psd1 -Force
        
        $config = New-PesterConfiguration
        $config.Run.Path = './Tests'
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputPath = 'testResults.xml'
        $config.CodeCoverage.Enabled = $true
        $config.CodeCoverage.Path = './Public/*.ps1', './Private/*.ps1'
        Invoke-Pester -Configuration $config
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.powershell-version }}
        path: testResults.xml

  publish:
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Publish to PowerShell Gallery
      shell: pwsh
      env:
        PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      run: |
        Publish-Module -Path . -Repository PSGallery -NuGetApiKey $env:PSGALLERY_API_KEY -Verbose